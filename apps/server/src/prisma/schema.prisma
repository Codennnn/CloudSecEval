// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------
// 文件与上传 元数据模型
// -------------------------
enum FileStatus {
  UPLOADING
  SCANNING
  READY
  FAILED
  DELETED
}

enum FileVisibility {
  PRIVATE
  PUBLIC
  PROTECTED
}

model FileObject {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  provider     String         @default("local")
  bucket       String?
  storageKey   String
  url          String?
  size         Int
  mimeType     String
  originalName String?
  sha256       String
  md5          String?
  width        Int?
  height       Int?
  duration     Int?
  status       FileStatus     @default(UPLOADING)
  visibility   FileVisibility @default(PRIVATE)
  metadata     Json?
  uploaderId   String?        @db.Uuid
  uploader     User?          @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  scannedAt    DateTime?
  checksumAt   DateTime?
  deletedAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([sha256, size])
  @@index([uploaderId, createdAt])
  @@index([status, createdAt])
  @@map("file_objects")
}

// 组织模型
model Organization {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  code      String   @unique // 组织编码，用于对接外部系统
  remark    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  departments Department[]
  users       User[]
  roles       Role[]
  bugReports  BugReport[] // 组织内的漏洞报告

  @@map("organizations")
}

// 部门模型
model Department {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orgId     String   @db.Uuid
  parentId  String?  @db.Uuid
  name      String
  remark    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  parent       Department?  @relation("DepartmentToChildren", fields: [parentId], references: [id], onDelete: Restrict)
  children     Department[] @relation("DepartmentToChildren")
  users        User[]

  @@unique([orgId, parentId, name]) // 同一父级下名称唯一
  @@index([orgId])
  @@index([parentId])
  @@map("departments")
}

// 用户模型
model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String   @unique
  phone        String?
  passwordHash String
  name         String?
  avatarUrl    String?
  isActive     Boolean  @default(true)
  orgId        String   @db.Uuid // 用户必须属于某个组织
  departmentId String?  @db.Uuid // 用户可选择属于某个部门
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联
  organization          Organization           @relation(fields: [orgId], references: [id], onDelete: Restrict)
  department            Department?            @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  passwordResetTokens   PasswordResetToken[]
  refreshTokens         RefreshToken[]
  userRoles             UserRole[]
  bugReports            BugReport[] // 用户提交的漏洞报告
  reviewedBugReports    BugReport[]            @relation("BugReportReviewer") // 用户审核的漏洞报告
  uploadedFiles         FileObject[]
  approvalLogs          BugReportApprovalLog[] @relation("BugReportApprover") // 用户审批的漏洞报告
  forwardedApprovalLogs BugReportApprovalLog[] @relation("BugReportForwardTarget") // 转发给用户的审批

  @@index([orgId])
  @@index([departmentId])
  @@map("users")
}

// 密码重置令牌
model PasswordResetToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  // 关联
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// 刷新令牌
model RefreshToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)

  // 关联
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// 授权码模型 - 用于付费内容访问控制
model License {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String
  code           String    @unique // 授权码格式: 支持多段格式，如 ABCD-EFGH-IJKL-MNOP 或 ABC-DEF-GHI
  isUsed         Boolean   @default(false) // 授权码是否已被使用过
  lastIP         String? // 最近使用的IP地址
  locked         Boolean   @default(false) // 是否被锁定
  warningCount   Int       @default(0) // 风控警告次数
  purchaseAmount Decimal?  @db.Decimal(10, 2) // 购买金额（单位：元），支持两位小数
  expiresAt      DateTime? // 过期时间（可空，null 表示永久授权）
  isExpired      Boolean   @default(false) // 是否已过期（冗余字段，便于查询优化）
  remark         String? // 备注信息（可选，用于标记授权码的额外信息）
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // 关联
  accessLogs AccessLog[]

  @@map("licenses")
}

// 访问日志模型 - 用于记录授权码使用情况和风控分析
model AccessLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  licenseId  String   @db.Uuid
  email      String
  ip         String // 访问IP地址
  isRisky    Boolean  @default(false) // 是否为风险访问
  accessedAt DateTime @default(now())

  // 关联
  license License @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@map("access_logs")
}

// 角色模型 - 用于权限管理和用户标签
model Role {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orgId       String?  @db.Uuid // null 表示系统级角色
  name        String // 角色显示名称，如 "组织管理员"
  slug        String // 角色标识符，如 "org_admin"
  description String? // 角色描述
  system      Boolean  @default(false) // 系统内置角色，不允许删除
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联
  organization    Organization?    @relation(fields: [orgId], references: [id], onDelete: Restrict)
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@unique([orgId, slug]) // 同组织内角色标识符唯一，系统级独立
  @@index([orgId])
  @@index([slug])
  @@map("roles")
}

// 权限模型 - 定义系统中所有可用权限
model Permission {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resource    String // 资源名称，如 "users", "departments"
  action      String // 操作类型，如 "read", "create", "update", "delete", "*"
  slug        String   @unique // 权限标识符: resource:action，如 "users:read"
  description String? // 权限描述
  system      Boolean  @default(true) // 系统权限，一般不允许删除
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联
  rolePermissions RolePermission[]

  @@index([resource])
  @@index([action])
  @@map("permissions")
}

// 角色权限关联表
model RolePermission {
  roleId       String   @db.Uuid
  permissionId String   @db.Uuid
  createdAt    DateTime @default(now())

  // 关联
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Restrict)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// 用户角色关联表 - 支持组织级别的角色分配
model UserRole {
  userId    String    @db.Uuid
  roleId    String    @db.Uuid
  orgId     String    @db.Uuid // 冗余字段，用于快速按组织过滤
  expiresAt DateTime? // 角色过期时间，null 表示永久
  note      String? // 分配备注
  createdAt DateTime  @default(now())

  // 关联
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId, orgId])
  @@index([orgId])
  @@index([expiresAt])
  @@map("user_roles")
}

// 漏洞报告模型 - 用于攻防演练平台的漏洞报告管理
model BugReport {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String // 报告标题（必填）
  severity       BugSeverity // 漏洞等级（必填）
  attackMethod   String? // 攻击方式（选填）
  description    String? // 详细问题描述（选填，富文本）
  discoveredUrls String[] // 发现漏洞的URL列表（选填）
  attachments    Json? // 附件元数据（选填，存储文件信息的JSON数组）
  status         BugReportStatus @default(PENDING) // 报告状态
  userId         String          @db.Uuid // 提交用户ID
  orgId          String          @db.Uuid // 组织ID（用于数据隔离）
  reviewerId     String?         @db.Uuid // 审核人ID（可选）
  reviewNote     String? // 审核备注（可选）
  reviewedAt     DateTime? // 审核时间（可选）
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // 关联
  user         User                   @relation(fields: [userId], references: [id], onDelete: Restrict)
  organization Organization           @relation(fields: [orgId], references: [id], onDelete: Restrict)
  reviewer     User?                  @relation("BugReportReviewer", fields: [reviewerId], references: [id], onDelete: SetNull)
  approvalLogs BugReportApprovalLog[]

  @@index([orgId])
  @@index([userId])
  @@index([status])
  @@index([severity])
  @@index([createdAt])
  @@map("bug_reports")
}

// 漏洞等级枚举
enum BugSeverity {
  INFO // 信息
  LOW // 低危
  MEDIUM // 中危
  HIGH // 高危
  CRITICAL // 严重

  @@map("bug_severity")
}

// 漏洞报告状态枚举
enum BugReportStatus {
  DRAFT // 草稿
  PENDING // 待审核
  IN_REVIEW // 审核中
  APPROVED // 已通过
  REJECTED // 已驳回
  RESOLVED // 已解决
  CLOSED // 已关闭

  @@map("bug_report_status")
}

// 审批日志模型 - 记录所有审批操作历史
model BugReportApprovalLog {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bugReportId  String   @db.Uuid
  approverId   String   @db.Uuid
  action       String // 'APPROVE', 'REJECT', 'REQUEST_INFO', 'FORWARD'
  comment      String // 审批意见
  targetUserId String?  @db.Uuid // 转发目标用户ID（仅转发时使用）
  createdAt    DateTime @default(now())

  // 关联
  bugReport  BugReport @relation(fields: [bugReportId], references: [id], onDelete: Cascade)
  approver   User      @relation("BugReportApprover", fields: [approverId], references: [id], onDelete: Restrict)
  targetUser User?     @relation("BugReportForwardTarget", fields: [targetUserId], references: [id], onDelete: SetNull)

  @@index([bugReportId])
  @@index([approverId])
  @@index([createdAt])
  @@map("bug_report_approval_logs")
}
